// Code generated by MockGen. DO NOT EDIT.
// Source: articles/uow.go

// Package mock_articles is a generated GoMock package.
package mock_articles

import (
	context "context"
	reflect "reflect"

	articles "github.com/antunesleo/rest-api-go/articles"
	gomock "github.com/golang/mock/gomock"
)

// MockUowStore is a mock of UowStore interface.
type MockUowStore struct {
	ctrl     *gomock.Controller
	recorder *MockUowStoreMockRecorder
}

// MockUowStoreMockRecorder is the mock recorder for MockUowStore.
type MockUowStoreMockRecorder struct {
	mock *MockUowStore
}

// NewMockUowStore creates a new mock instance.
func NewMockUowStore(ctrl *gomock.Controller) *MockUowStore {
	mock := &MockUowStore{ctrl: ctrl}
	mock.recorder = &MockUowStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUowStore) EXPECT() *MockUowStoreMockRecorder {
	return m.recorder
}

// GetArticleRepository mocks base method.
func (m *MockUowStore) GetArticleRepository() articles.ArticleRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleRepository")
	ret0, _ := ret[0].(articles.ArticleRepository)
	return ret0
}

// GetArticleRepository indicates an expected call of GetArticleRepository.
func (mr *MockUowStoreMockRecorder) GetArticleRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleRepository", reflect.TypeOf((*MockUowStore)(nil).GetArticleRepository))
}

// GetCategoryRepository mocks base method.
func (m *MockUowStore) GetCategoryRepository() articles.CategoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryRepository")
	ret0, _ := ret[0].(articles.CategoryRepository)
	return ret0
}

// GetCategoryRepository indicates an expected call of GetCategoryRepository.
func (mr *MockUowStoreMockRecorder) GetCategoryRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryRepository", reflect.TypeOf((*MockUowStore)(nil).GetCategoryRepository))
}

// MockUow is a mock of Uow interface.
type MockUow struct {
	ctrl     *gomock.Controller
	recorder *MockUowMockRecorder
}

// MockUowMockRecorder is the mock recorder for MockUow.
type MockUowMockRecorder struct {
	mock *MockUow
}

// NewMockUow creates a new mock instance.
func NewMockUow(ctrl *gomock.Controller) *MockUow {
	mock := &MockUow{ctrl: ctrl}
	mock.recorder = &MockUowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUow) EXPECT() *MockUowMockRecorder {
	return m.recorder
}

// WithinTx mocks base method.
func (m *MockUow) WithinTx(arg0 context.Context, arg1 articles.TransactionFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinTx indicates an expected call of WithinTx.
func (mr *MockUowMockRecorder) WithinTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTx", reflect.TypeOf((*MockUow)(nil).WithinTx), arg0, arg1)
}
